plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.github.ben-manes.versions'
}

apply from: "$rootProject.projectDir/scripts/quality/dokka.gradle"
apply from: "$rootProject.projectDir/scripts/quality/jacoco.gradle"
apply from: "$rootProject.projectDir/scripts/quality/sonar.gradle"

android {
    compileSdk versions.compileSdkVersion

    defaultConfig {
        applicationId "com.andriawan.hydrationtracker"
        minSdk versions.minSdkVersion
        targetSdk versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "com.andriawan.hydrationtracker.HiltTestRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
            minifyEnabled false
        }

        release {
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }

    buildFeatures {
        compose true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation libraries.coreKtx
    implementation libraries.appCompat
    implementation libraries.material
    implementation libraries.constraintLayout
    implementation libraries.lifecycle
    implementation libraries.compose
    implementation libraries.composeNavigation
    implementation libraries.systemUiController
    implementation libraries.splashScreen
    implementation libraries.room
    implementation libraries.hilt
    implementation libraries.workManager

    // Annotation Processor
    kapt annotationProcessors.hiltCompiler
    kapt annotationProcessors.roomCompiler

    // Firebase
    implementation platform(libraries.firebaseBOM)
    implementation libraries.firebaseAnalytics

    // Testing
    testImplementation testLibraries.jUnit
    testImplementation testLibraries.truth
    androidTestImplementation testLibraries.jUnit
    androidTestImplementation testLibraries.espresso
    androidTestImplementation testLibraries.truth
    androidTestImplementation testLibraries.coreTesting
    androidTestImplementation testLibraries.coroutinesTesting
    androidTestImplementation testLibraries.hiltTesting
    androidTestImplementation testLibraries.runnerTesting
    kaptAndroidTest annotationProcessors.hiltCompiler
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true
    outputFormatter = "html,json,plain,xml,Closure"
    outputDir = "build/dependencyUpdates"
    reportfileName = "updateDependencyReport"

    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'